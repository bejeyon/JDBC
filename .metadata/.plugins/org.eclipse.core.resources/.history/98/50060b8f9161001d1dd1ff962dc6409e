package com.myapp;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class AccountDAO implements AccountDAOInterface { 

	private Connection conn = DBConnection.getConnection();
	
	//insert
	public void accountInsert(AccountVO newAccount) {
		String sql = "insert into hr.accounts( ano,owner,balance) values(?, ?, ?) ";

		try {
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, newAccount.getAno());
			preparedStatement.setString(2, newAccount.getOwner());
			preparedStatement.setDouble(3, newAccount.getBalance());
			preparedStatement.executeUpdate();
			System.out.println("hr.accounts 입력 성공");
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
		}//end try
	}//end accountInsert

	//select all
	public void accountList() {
		String sql = "select * from hr.accounts";
		try {
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			ResultSet resultSet =  preparedStatement.executeQuery();
			while (resultSet.next()) {
				System.out.print(resultSet.getString(1) + "   ");
				System.out.print(resultSet.getString(2) + "   ");
				System.out.println(resultSet.getDouble(3));
			}//end while
			System.out.println();
		} catch (SQLException e) {
			System.out.println("에러 발생!");
			System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
		}//end try
	}//end accountList

	//입금 deposit
	public void accountPlusUpdate(AccountVO account) {
		String  sql= "UPDATE hr.accounts set balance = (balance+?) where ano=?";
		try {
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setDouble(1, account.getBalance());
			preparedStatement.setString(2, account.getAno());			
			preparedStatement.executeUpdate();
			System.out.println("입금 성공");
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
		}
	}//end accountPlusUpdate

	//출금 withdraw
	public void accountMinusUpdate(AccountVO account) {
		String  sql= "UPDATE hr.accounts set balance = (balance - ?) where ano=?";
		try {
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setDouble(1, account.getBalance());
			preparedStatement.setString(2, account.getAno());			
			preparedStatement.executeUpdate();
			System.out.println("출금 성공");
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
		}
	}//end accountMinusUpdate
	

	//계좌 확인
	public boolean accountFindOne(String ano) {
		boolean isExist = false;
		String sql = "select count(*)  from hr.accounts where ano = ? ";
		
		try {
			PreparedStatement preparedStatement = conn.prepareStatement(sql);
			preparedStatement.setString(1, ano);
			ResultSet resultSet =preparedStatement.executeQuery();
			resultSet.next();
			
			int result = resultSet.getInt(1);
			if (result ==1 ) {
				isExist = true;
			} else {
				isExist = false;
			}//end if
		} catch (SQLException e) {
			System.err.format("SQL State: %s\n%s", e.getSQLState(), e.getMessage());
			System.out.println();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
		}//end try		
		return isExist;
	}//end accountFindOne

}//end class